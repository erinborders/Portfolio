/* reset the box sizing because it makes styling so much easier */
/* always add this at the beginning of css files  */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* classic resets to do for all css are setting the body margin, line height,
 the image max width and display, and margin for h1,2,3 and p  */

/* start off css designing for mobile and try to design generic/reusable
 classes first */

body {
  margin: 0;
  line-height: 1.5;
}

.image__container {
    height: 50%;
    width: 50%;
    // object-fit: contain;
}

img {
  max-width: 100%;
//   max-height: 100%;
//   display: block;
}

h1,
h2,
h3,
p {
  margin: 0;
}

section {
  padding: 5em 0;
}

// main {
//     background-color: grey;
// }

// .main__container {
//     background-color: white;
//     margin: 2em;
// }

.container {
  width: 85%;
  /* 65 * 16 will translate em to pixels  */
  max-width: 65em;
  margin: 0 auto;
}

.column {
  display: flex;
  // will put a gap between my flex items
  gap: 3em;
  flex-wrap: wrap;
  justify-content: center;

  // all direct children of my column
  & > * {
    flex-basis: 30%;
    // telling them the ideal width for starting the flex movement
    min-width: 15em;
  }
}

.btn {
  display: inline-block;
  text-decoration: none;
  padding: 0.5em 1.25em;
  /* different approach to css variables where we didn't declare it in the beginning */
  background: var(--clr-accent, rgb(106, 106, 255));
  color: var(--clr-text, white);
  font-weight: 700;
  text-transform: uppercase;
  font-size: 1.125rem;
  border-radius: 0.25em;
  transition: transform 250ms ease-in-out, opacity 175ms linear;
}

.btn:hover,
.btn:focus {
  transform: scale(1.1);
  opacity: 0.9;
}

// .hamburger__menu {
//   // background: aliceblue;
//   padding: 0.5em;
//   display: block;
//   position: absolute;
// }

.nav__icon {
  margin: 1em;
  width: 2em;
}

.nav__icon:after, .nav__icon:before, .nav__icon div {
  content: '';
  background-color: black; // creates hamburger menu lines
  border-radius: 3px;
  display: block;
  height: 0.25em; // so you can actually see them
  margin: 0.5em 0;
  transition: all 0.5s ease-in-out;
}

// icon animation
.nav__icon:hover:before {
  transform: translateY(12px) rotate(135deg);
}

.nav__icon:hover:after {
  transform: translateY(-12px) rotate(-135deg);
}

.nav__icon:hover div {
  transform: scale(0);
}

.show__link {
  // opacity: 1;
  // transition: opacity 0.5s ease-in-out;
  display: inline-block;
}


.hidden__link {
  display: none;
  // opacity: 0;
  // transition: 0.5s ease-in-out;
}

.navigator {
  display: flex;
  justify-content: space-between;
}

.navlink__container {
  display: flex;
  gap: 2em;
  align-items: center;

  a {
    text-decoration: none;
    text-transform: uppercase;
  }
}


.header-title {
  font-size: clamp(1rem, 10vw, 2rem);
  /* can also use clamp with font size if using sass  */
  line-height: 1;
  text-transform: uppercase;
}

.section-title {
  text-align: center;
  font-size: 2.5rem;
  // make sure to see what it looks like at all screen sizes
  line-height: 1;
  margin-bottom: 3rem;
}

// spacing isn't going to do anything but the direct children inside of it will
// any element that is the adjacent sibling that is the direct child of spacing
// so the header title doesn't get a top margin but the paragraph and button do
.spacing > * + * {
  margin-top: var(--spacer, 2rem);
}

.hero {
  color: white;
  text-shadow: 0 1px 2px black;
  text-align: center;
  padding: 10em 0;
  background-image: url(https://picsum.photos/250);
  /* to fix repeating transparent image, bring in a radial gradient 
        radial-gradient(#444, #111) */
  background-size: cover;
  // can be nested inside because using sass but otherwise it would be outside
  @supports (background-blend-mode: lighten) {
    background-color: rgb(98, 98, 255);
    /* allows you to blend layers - really nice for blending images and colors or gradients  */
    background-blend-mode: lighten;
  }
  // having a fixed background attachment and no repeat background makes
  // a parallax scroll effect
  background-attachment: fixed;
  background-repeat: no-repeat;

  .container {
    border: 2px solid white;
    padding: 2em;
  }


}

.separator {
  padding: 10em 0;
  background-image: url(https://picsum.photos/250);
  background-size: cover;
  background-attachment: fixed;
  background-repeat: no-repeat;
}

// the & in sass is basically a repeat of whatever it's nested inside
// anything nested is within the scope of what it's nested in
.featured {
  // just to separate it a bit from the next section
  background: aliceblue;

  &__project {
    // so this is for everything with the class featured__project
    position: relative; // because we're going to have pseudo elements that come into play
    transform: scale(0.85);
    transition: transform 250ms ease-in-out;
    text-decoration: none;
    text-align: center;

    &:hover,
    &:focus {
      transform: scale(1);

      .featured__details {
        opacity: 1; // turns project details on and off
      }
    }

    &::after {
      // anytime you have a pseudo element you have to give it content so it exists
      content: "";
      top: -1.75rem;
      left: -1.75rem;
      position: absolute; // which is why we gave the other element a relative position
      padding: 19rem 19rem 0 0; // square
      // border-radius: 50%;  round off the edges to a circle
      background: white;
      z-index: -1;
    }
  }

  &__details {
    opacity: 0;
    transition: opacity 250ms linear;
    text-align: center;
    padding-right: 3em;

    span {
      display: block;
      font-weight: 700;
      font-size: 1rem;
    }
  }
}

.moving__project {
    display: flex;
    justify-content: center;
}

.project__image {

}

.project {
  background: radial-gradient(white, aliceblue);
  // background: radial-gradient(var(--clr-inner, white), var(--clr-outer, aliceblue))
  // the above means I could use a variable to change the gradient colors if I wanted
  // by adding --clr-inner: red (for example) on the actual item in question
  // otherwise it'll just use white and aliceblue
  // you can use this for light and dark modes
  padding: 3em;
  border-radius: 1em;
  margin-bottom: 3em;
  text-align: center;

  &__title {
    font-size: 2em;
    line-height: 1em;
    margin: 0.5em auto;
  }

  &__text {
      display: none;
  }

}

.moving__project {
    margin: 0;
}

// an example of changing the custom variable
// .first {
//     --clr-accent: red;
// }

@media (min-width: 46em) {

    .project__text {
        display: block;
    }

    .image__container {
        height: 100%;
        width: 100%;
        object-fit: contain;
    }

  .myprojects__container {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-template-areas:
      "first_image"
      "second_image"
      "third_image";
    row-gap: 10em;
  }

  .first__project {
    grid-area: first_image;

    // display: grid;
    // grid-template-columns: 1fr 1fr;
  }

  .second__project {
    grid-area: second_image;
    justify-self: end;
    text-align: right;

    .project__image {
      display: inline;
    }
  }

  .third__project {
    grid-area: third_image;
  }

  .moving__project {
    // max-width: 30em;
    margin: 0;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-areas:
      "image1 text1 text1 ."
      ". text2 text2 image2"
      "image3 text3 text3 .";
    column-gap: 1em;

    #portfolio__offer {
      grid-area: image1;
    }

    #portfolio__text {
      grid-area: text1;
    }

    #landingpage__offer {
      grid-area: image2;
    }

    #landingpage__text {
      grid-area: text2;
    }

    #businesspage__offer {
      grid-area: image3;
    }

    #businesspage__text {
      grid-area: text3;
    }
  }
}
